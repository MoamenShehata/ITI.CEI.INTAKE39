<div id="TemplateProductionConfigurations" style="width:1367px;height:520px;position:absolute">
    <img src="@Url.Content("~/Images/cladding_Material_2.jpg")" alt="" style="display:none" id="cladding_image" />
    <img src="@Url.Content("~/Images/grass.jpg")" alt="" style="display:none" id="grass_image" />

</div>

<script>
    //#region   Minimum Need
    let ConfigfieldOfView = 45;
    let ConfigAspectRatio = 1367 / 470;
    //let AspectRatio = window.innerWidth / window.innerHeight;
    let ConfigNearClip = 1;
    let ConfigFarClip = 1000;

    let ConfigViewer = document.getElementById("TemplateProductionConfigurations");

    let ConfigScene = CreateScene();
    let ConfigCamera = CreateCamera(ConfigfieldOfView, ConfigAspectRatio, ConfigNearClip, ConfigFarClip);
    let ConfigRenderer = CreateRenderer("TemplateProductionConfigurations");
    let ConfigOrbitControl = new THREE.OrbitControls(ConfigCamera, ConfigRenderer.domElement);

    let ConfigRaycaster = new THREE.Raycaster();
    let ConfigMouse = new THREE.Vector2();
    //#endregion

    //#region   Material Definition
    var blueMaterial = NewMaterialByColor(0x0000ff);
    var greenMaterial = NewMaterialByColor(0x00FF00);
    var redMaterial = NewMaterialByColor(0xFF0000);
    var yellowMaterial = NewMaterialByColor('rgb(238, 255, 0)');
    var whiteMaterial = NewMaterialByColor('rgb(255, 255, 255)');

    //var Slider_Image_path = document.getElementById("slider_image").getAttribute("src");
    //var sliderTexture = new THREE.TextureLoader().load(Slider_Image_path);
    //var materialSlider = new THREE.MeshBasicMaterial({ map: sliderTexture });

    //var slider_plus_image = document.getElementById("Plus_image").getAttribute("src");
    //var slider_plus_texture = new THREE.TextureLoader().load(slider_plus_image);
    //var SliderMaterialPlus = new THREE.MeshBasicMaterial({ map: slider_plus_texture });

    //var slider_minus_image = document.getElementById("Minus_image").getAttribute("src");
    //var slider_minus_texture = new THREE.TextureLoader().load(slider_minus_image);
    //var SliderMaterialMinus = new THREE.MeshBasicMaterial({ map: slider_minus_texture });

    //#endregion

    var objects = [];
    SetCameraPosition(ConfigCamera, 20, 20, 20);
    ConfigCamera.lookAt(new THREE.Vector3(0, 0, -project_length / 2));

    //var dragControls = new THREE.DragControls(objects, ConfigCamera, ConfigRenderer.domElement);

    //dragControls.addEventListener('dragstart', function (controls) {
    //    //confirm("Drag Started");
    //    controls.enabled = false;

    //});
    //dragControls.addEventListener('dragend', function (controls) {
    //    //confirm("Drag Ended");

    //    controls.enabled = true;
    //});
    //dragControls.addEventListener('mousedown', mouseDown, false);


    function mouseDown() {
        confirm("mouse downed");
    }

    //#region Project_Components
    var myWindows = [];

    var Grass_Image_path = document.getElementById("grass_image").getAttribute("src");
    var Grass_plus_texture = new THREE.TextureLoader().load(Grass_Image_path);
    var GrassMaterial = new THREE.MeshBasicMaterial({ map: Grass_plus_texture });

    var ground = CreateCube(project_span + 5, .5, project_length + 5, GrassMaterial, "Ground", "Ground-1");
    ground.position.z -= project_length / 2;
    ConfigScene.add(ground);

    var sideCladding1 = new CladdingDoubleSide(project_span, project_height, project_length);
    sideCladding1.DrawGeometry(ConfigScene);

    var roof1 = new RoofDouble(project_span, project_length, project_slope, project_height);
    roof1.DrawGeometry(ConfigScene);

    var frontWall = new FrontWall(project_span, project_height, project_slope, 0);
    frontWall.DrawGeometry(ConfigScene);

    var backWall = new FrontWall(project_span, project_height, project_slope, -project_length);
    backWall.DrawGeometry(ConfigScene);

    var doublew1 = new RowWindow(2, 1, "rgb(180, 118, 4)", "front", -3, 6.5, 0, 3);
    doublew1.DrawGeometry(ConfigScene);

    for (let i = 5; i < project_length; i += 15) {
        let windowright = new SingleWindow(2, 1.5, "rgb(180, 118, 4)", "side", project_span / 2, project_height - 0.5, -i);
        let windowleft = new SingleWindow(2, 1.5, "rgb(180, 118, 4)", "side", -project_span / 2, project_height - 0.5, -i);
        myWindows.push(windowright);
        myWindows.push(windowleft);
        windowright.DrawGeometry(ConfigScene);
        windowleft.DrawGeometry(ConfigScene);
    }


    objects.push(sideCladding1.RightCladding);
    objects.push(sideCladding1.LeftCladding);
    objects.push(roof1.RightRoof);
    objects.push(roof1.LeftRoof);
    //#endregion

    //#region ThreeJsViewer Controls
    //let DimHeightSlider = new PebsVerticalSlider(0.7, .2, "Height", -(project_span / 2) - 1);
    //DimHeightSlider.Draw(ConfigScene);

    //let DimLengthSlider = new PebsHorizontalSlider(0.7, .2, "Length", 0);
    //DimLengthSlider.Draw(ConfigScene);
    //DimLengthSlider.Slider.position.x = (project_span / 2) + 1;
    ////LengthSlider.Slider.position.y = 0.5;

    //let DimSpanSlider = new PebsHorizontalSlider(0.7, .2, "Span", 0);
    //DimSpanSlider.Draw(ConfigScene);
    //DimSpanSlider.Slider.rotation.y = Math.PI / 2;
    ////SpanSlider.Slider.position.y = .5;

    //let DimSlopeSlider = new PebsVerticalSlider(0.7, .2, "Slope", 0);
    //DimSlopeSlider.Draw(ConfigScene);
    //DimSlopeSlider.Slider.position.y = project_height;
    //DimSlopeSlider.Slider.position.z = .2;
    //#endregion

    //#region Dimensions
    //let DimlengthDim = new PebsDimension(15, 0, project_length, "z");
    //DimlengthDim.DrawGeometry(ConfigScene);

    //let DimspanDim = new PebsDimension(project_span / 2, 1, project_span, "x");
    //DimspanDim.DrawGeometry(ConfigScene);
    //#endregion

    Update(ConfigRenderer, ConfigCamera, ConfigScene);

    //OnClick(onDocumentMouseDown);
    //OnHover(onDocumentMouseMove);

    function onDocumentMouseDown(event) {
        //debugger

        let bounds = ConfigViewer.getBoundingClientRect();
        ConfigMouse.x = ((event.clientX - bounds.left) / ConfigViewer.clientWidth) * 2 - 1;
        ConfigMouse.y = - ((event.clientY - bounds.top) / ConfigViewer.clientHeight) * 2 + 1;
        ConfigRaycaster.setFromCamera(ConfigMouse, ConfigCamera);
        let Dimintersects = ConfigRaycaster.intersectObjects(ConfigScene.children, true);
        if (Dimintersects.length > 0) {

            if (Dimintersects[0].object.ObjectType != null && Dimintersects[0].object.ObjectType.includes("PEBS_OBJ")) {
                //Dimintersects[0].object.material.color.setHex(Math.random() * 0xffffff);
                //Dimintersects[0].object.material.color = new THREE.Color( 'rgb(238, 255, 0)' );
                console.log(Dimintersects[0].object);
            }

            //Height SLider Functionality On Click
            if (Dimintersects[0].object.ObjectType != null && Dimintersects[0].object.Name == "Height_Slider_Plus") {
                //debugger;
                let NewHeight = project_height + .25;
                if (EditProjectHeight(NewHeight)) {
                }
            }
            if (Dimintersects[0].object.ObjectType != null && Dimintersects[0].object.Name == "Height_Slider_Minus") {
                let NewHeight = project_height - .25;
                if (EditProjectHeight(NewHeight)) {
                }
            }

            //Length SLider Functionality On Click
            if (Dimintersects[0].object.ObjectType != null && Dimintersects[0].object.Name == "Length_Slider_Plus") {
                let NewLength = project_length + .5;
                if (EditProjectLength(NewLength)) {
                    PlotProjectBays(project_span, project_spacing, NewLength);
                }

            }
            if (Dimintersects[0].object.ObjectType != null && Dimintersects[0].object.Name == "Length_Slider_Minus") {
                let NewLength = project_length - .5;
                if (EditProjectLength(NewLength)) {
                }
            }

            //Span SLider Functionality On Click
            if (Dimintersects[0].object.ObjectType != null && Dimintersects[0].object.Name == "Span_Slider_Plus") {
                let NewSpan = project_span + .5;
                if (EditProjectSpan(NewSpan)) {
                    DimlengthDim.DimensionLine.position.x += .5;
                    DimlengthDim.StartExtent.position.x += .5;
                    DimlengthDim.EndExtent.position.x += .5;
                }
            }

            if (Dimintersects[0].object.ObjectType != null && Dimintersects[0].object.Name == "Span_Slider_Minus") {
                let NewSpan = project_span - .5;
                if (EditProjectSpan(NewSpan)) {
                    DimlengthDim.DimensionLine.position.x -= .5;
                    DimlengthDim.StartExtent.position.x -= .5;
                    DimlengthDim.EndExtent.position.x -= .5;
                }
            }
            //Slope SLider Functionality On Click
            if (Dimintersects[0].object.ObjectType != null && Dimintersects[0].object.Name == "Slope_Slider_Plus") {
                let NewSlope = project_slope + .01;
                if (EditProjectSlope(NewSlope)) {
                }
            }
            if (Dimintersects[0].object.ObjectType != null && Dimintersects[0].object.Name == "Slope_Slider_Minus") {
                let NewSlope = project_slope - .01;
                if (EditProjectSlope(NewSlope)) {
                }
            }
        }
    }

    //let intersected;
    //let oldcolor;
    function onDocumentMouseMove(event) {

        let bounds = viewer.getBoundingClientRect()
        mouse.x = ((event.clientX - bounds.left) / viewer.clientWidth) * 2 - 1;
        mouse.y = - ((event.clientY - bounds.top) / viewer.clientHeight) * 2 + 1;
        raycaster.setFromCamera(mouse, camera);
        let intersects = raycaster.intersectObjects(ConfigScene.children, true);


        if (intersects.length > 0) {

            if (intersects[0].object.hasOwnProperty("ObjectType") == true && intersects[0].object.ObjectType.includes("PEBS_OBJ")) {

                intersected = intersects[0].object;
                oldcolor = intersected.material.color.getStyle().toString();
                console.log("intersected Before Assign : " + intersected.material.color.getStyle().toString());

                let newColor = new THREE.Color('rgb(0, 0, 200)');
                intersects[0].object.material.color = newColor;
                //console.log("moamen");
            }
            else if (intersected != null) {
                console.log("AnyThing");
                intersected.material.color = new THREE.Color(oldcolor);
                //intersected.material.color = new THREE.Color('rgb(0, 0, 255)');
            }
        }


        //intersected != null && intersected.ObjectType.includes("PEBS_OBJ");
        //else if(){
        //	console.log(oldcolor);
        //	intersected.material.color = oldcolor;
        //	//intersected.material.color = new THREE.Color('rgb(0, 0, 255)');
        //}
    }

</script>