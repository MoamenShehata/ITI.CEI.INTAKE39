<div id="TemplateProductionBays" style=" width:1367px;height:520px;position:absolute">
    <img src="@Url.Content("~/Images/slider.png")" alt="" style="display:none" id="slider_image" />
    <img src="@Url.Content("~/Images/cladding_Material_2.jpg")" alt="" style="display:none" id="cladding_image" />
    <img src="@Url.Content("~/Images/Plus.jpg")" alt="" style="display:none" id="Plus_image" />
    <img src="@Url.Content("~/Images/Minus.jpg")" alt="" style="display:none" id="Minus_image" />

</div>

<script>
    //#region   Minimum Need
    let BaysfieldOfView = 45;
    let BaysAspectRatio = 1367 / 470;
    let BaysNearClip = 10;
    let BaysFarClip = 1000;

    let Baysviewer = document.getElementById("TemplateProductionBays");

    let Baysscene = CreateScene();
    let BaysCamera = CreateCamera(BaysfieldOfView, BaysAspectRatio, BaysNearClip, BaysFarClip);
    let Baysrenderer = CreateRenderer("TemplateProductionBays");
    //let BaysorbitControl = new THREE.OrbitControls(Bayscamera, Baysrenderer.domElement);

    let Baysraycaster = new THREE.Raycaster();
    let Baysmouse = new THREE.Vector2();
    //#endregion

    SetCameraPosition(BaysCamera, 0, 40, -(project_length / 2));
    BaysCamera.lookAt(new THREE.Vector3(0, 0, -project_length / 2));
    BaysCamera.rotation.z = Math.PI / 2;

    //#region Project_Components
    PlotProjectBays(project_span, 5, project_length)

    //#endregion

    //#region ThreeJsViewer Controls
    var BaysBayWidthSlider;

    //#endregion

    //#region Dimensions
    var BaysLengthDim = new PebsDimension((project_span / -2) - 3, 0, project_length, "z");
    BaysLengthDim.DrawGeometry(Baysscene);

    //#endregion



    var bays;
    function PlotProjectBays(baySpan, bayWidth, totalLength) {
        ClearScene(Baysscene);

        let backgroundMaterial = NewMaterialByColor('rgb(205, 205, 205)');
        let background = CreateCube(500, .1, 500, backgroundMaterial, "BackGround", "background-0")
        Baysscene.add(background);
        background.position.y = -.1;

        BaysBayWidthSlider = new PebsHorizontalSlider(1, .3, "width", 0)
        BaysBayWidthSlider.Draw(Baysscene);
        BaysBayWidthSlider.Slider.position.x = (project_span / 2) + 1;
        bays = [];

        let leftOrigin = 140;
        let topOrigin = 32;
        //step 74px in left;
        for (var i = 0; i < totalLength; i += bayWidth) {
            let bay = new Bay(baySpan, bayWidth, -i);
            bay.DrawGeometry(Baysscene);
            bays.push(bay);

            let text = document.createElement('label');
            text.innerText = bayWidth + "m";
            text.setAttribute("style", `position: absolute;top:${topOrigin}px;;left:${leftOrigin}px`)
            document.getElementById("TemplateProductionBays").append(text);
            leftOrigin += 74;
        }
        for (var i = 0; i < bays.length; i++) {
            if (i != bays.length - 1) {
                bays[i].Next = bays[i + 1].Instance;

            }
        }
    }

    Update(Baysrenderer, BaysCamera, Baysscene);

    OnClick(onDocumentMouseDown);

    var selectedBay = null;
    function onDocumentMouseDown(event) {
        let bounds = Baysviewer.getBoundingClientRect();
        Baysmouse.x = ((event.clientX - bounds.left) / Baysviewer.clientWidth) * 2 - 1;
        Baysmouse.y = - ((event.clientY - bounds.top) / Baysviewer.clientHeight) * 2 + 1;
        Baysraycaster.setFromCamera(Baysmouse, BaysCamera);
        let Baysintersects = Baysraycaster.intersectObjects(Baysscene.children, true);
        if (Baysintersects.length > 0) {

            //Bay Selecting Functionality On Click
            if (Baysintersects[0].object.ObjectType != null && Baysintersects[0].object.ObjectType.includes("Bay")) {
                if (selectedBay == null) {
                    selectedBay = Baysintersects[0].object;
                    //console.log(selectedBay.Instance.SetWidth);
                    Baysintersects[0].object.material.color = new THREE.Color('rgb(0, 51, 127)');
                    Baysintersects[0].object.children[0].material.color = new THREE.Color('rgb(198, 255, 0)');
                    Baysintersects[0].object.children[1].material.color = new THREE.Color('rgb(198, 255, 0)');
                    BaysBayWidthSlider.Slider.position.z = Baysintersects[0].object.position.z + .5;
                }
                else {
                    selectedBay.material.color = new THREE.Color('rgb(0, 67, 168)');
                    selectedBay.children[0].material.color = new THREE.Color('rgb(255, 255, 255)');
                    selectedBay.children[1].material.color = new THREE.Color('rgb(255, 255, 255)');
                    selectedBay = Baysintersects[0].object;
                    //confirm(selectedBay);

                    Baysintersects[0].object.material.color = new THREE.Color('rgb(0, 51, 127)');
                    Baysintersects[0].object.children[0].material.color = new THREE.Color('rgb(198, 255, 0)');
                    Baysintersects[0].object.children[1].material.color = new THREE.Color('rgb(198, 255, 0)');
                    BaysBayWidthSlider.Slider.position.z = Baysintersects[0].object.position.z + .5;

                }
            }

            //Background Selecting(OR Deslecting Any Object) Functionality On Click
            if (Baysintersects[0].object.ObjectType != null && Baysintersects[0].object.ObjectType.includes("BackGround")) {
                //Baysintersects[0].object.material.color = new THREE.Color('rgb(0, 255, 0)');
                if (selectedBay != null) {
                    selectedBay.children[0].material.color = new THREE.Color('rgb(255, 255, 255)');
                    selectedBay.children[1].material.color = new THREE.Color('rgb(255, 255, 255)');
                    selectedBay.material.color = new THREE.Color('rgb(0, 67, 168)');
                    selectedBay = null;
                }
                //confirm(Baysintersects[0].object.Name);
            }

            //Bay Width SLider Functionality On Click
            if (Baysintersects[0].object.ObjectType != null && Baysintersects[0].object.Name == "width_Slider_Plus") {
                if (selectedBay != null) {
                    //debugger;
                    let w = selectedBay.Instance.Width;
                    w += 0.25;
                    if (w >= project_spacing_min && w <= project_spacing_max) {
                        let totalNewLength = project_length + .25;
                        if (EditProjectLength(totalNewLength)) {
                            selectedBay.Instance.SetWidth(w);
                            console.log(project_length);
                            //selectedBay.Instance.Width = w;
                        }
                    }
                    else if (w < project_spacing_min) {
                        confirm("Frame Spacing Must Be At Least " + project_spacing_min + " m");
                    }
                    else if (w > project_spacing_max) {
                        confirm("Frame Spacing Can not Exceed Value Of " + project_spacing_max + " m");
                    }
                }
            }

            if (Baysintersects[0].object.ObjectType != null && Baysintersects[0].object.Name == "width_Slider_Minus") {
                if (selectedBay != null) {
                    let w = selectedBay.Instance.Width;
                    w -= 0.25;
                    if (w >= project_spacing_min && w <= project_spacing_max) {
                        let totalNewLength = project_length - .25;
                        if (EditProjectLength(totalNewLength)) {
                            selectedBay.Instance.SetWidth(w);
                            console.log(project_length);
                            selectedBay.Instance.Width = w;
                        }
                    }
                    else if (w < project_spacing_min) {
                        confirm("Frame Spacing Must Be At Least " + project_spacing_min + " m");
                    }
                    else if (w > project_spacing_max) {
                        confirm("Frame Spacing Can not Exceed Value Of " + project_spacing_max + " m");
                    }
                }
            }
        }

    }


</script>